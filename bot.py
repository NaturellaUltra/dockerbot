import os
import threading
import sqlite3
import datetime
from flask import Flask
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler, CallbackQueryHandler
)
from openpyxl import Workbook
from io import BytesIO

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
NOTIFY_CHAT_ID = os.getenv("NOTIFY_CHAT_ID")  # –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

REGISTER_NAME, REGISTER_DEPARTMENT, WAIT_REASON = range(3)
ADMIN_IDS = {717329852, 653756588}
DEPARTMENTS = [
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –≤—ã—è–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–π",
    "–û—Ç–¥–µ–ª —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤",
    "–û—Ç–¥–µ–ª —Å–µ–≤–µ—Ä–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤",
    "–û—Ç–¥–µ–ª —é–∂–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤",
    "–û—Ç–¥–µ–ª –ø—Ä–∞–≤–æ–±–µ—Ä–µ–∂–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤",
    "–û—Ç–¥–µ–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏"
]

departments_keyboard = [[KeyboardButton(dept)] for dept in DEPARTMENTS]
main_button = [[KeyboardButton("üö™ –°–æ–æ–±—â–∏—Ç—å –æ–± —É–±—ã—Ç–∏–∏ —Å —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞")]]
admin_button = [[KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç")]]

conn = sqlite3.connect("bot_data.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, full_name TEXT, department TEXT, is_admin INTEGER)")
cursor.execute("CREATE TABLE IF NOT EXISTS departures (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, reason TEXT, timestamp DATETIME)")
conn.commit()

def is_registered(user_id: int) -> bool:
    cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone() is not None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if is_registered(user_id):
        cursor.execute("SELECT is_admin FROM users WHERE user_id = ?", (user_id,))
        is_admin = cursor.fetchone()[0]
        keyboard = main_button.copy()
        if is_admin:
            keyboard += admin_button
        await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return ConversationHandler.END
    await update.message.reply_text("üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –°–µ—Ä–≥–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á):")
    return REGISTER_NAME

async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if len(name.split()) < 3:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ).")
        return REGISTER_NAME
    context.user_data["full_name"] = name
    await update.message.reply_text("‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:", reply_markup=ReplyKeyboardMarkup(departments_keyboard, resize_keyboard=True))
    return REGISTER_DEPARTMENT

async def register_department(update: Update, context: ContextTypes.DEFAULT_TYPE):
    department = update.message.text
    user_id = update.effective_user.id
    full_name = context.user_data["full_name"]
    is_admin = 1 if user_id in ADMIN_IDS else 0
    cursor.execute("INSERT OR REPLACE INTO users (user_id, full_name, department, is_admin) VALUES (?, ?, ?, ?)", (user_id, full_name, department, is_admin))
    conn.commit()
    keyboard = main_button.copy()
    if is_admin:
        keyboard += admin_button
    await update.message.reply_text("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return ConversationHandler.END

async def handle_departure(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_registered(user_id):
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ /start.")
        return ConversationHandler.END
    await update.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –∫—É–¥–∞ –≤—ã —É—Ö–æ–¥–∏—Ç–µ –∏ –≤–æ —Å–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–≤ –ú–§–¶, –≤–µ—Ä–Ω—É—Å—å –≤ 14:30¬ª):")
    return WAIT_REASON

async def save_departure(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now()
    if now.weekday() >= 5 or not (9 <= now.hour < 18):
        await update.message.reply_text("‚è∞ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
        return ConversationHandler.END
    user_id = update.effective_user.id
    reason = update.message.text
    timestamp = datetime.datetime.now()
    cursor.execute("INSERT INTO departures (user_id, reason, timestamp) VALUES (?, ?, ?)", (user_id, reason, timestamp))
    conn.commit()
    cursor.execute("SELECT full_name, department FROM users WHERE user_id = ?", (user_id,))
    full_name, department = cursor.fetchone()
    await update.message.reply_text("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    if NOTIFY_CHAT_ID:
        try:
            await context.bot.send_message(
                chat_id=int(NOTIFY_CHAT_ID),
                text=(
                    f"üì£ *–£–±—ã—Ç–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞*\n"
                    f"üë§ {full_name}\n"
                    f"üè¢ –û—Ç–¥–µ–ª: {department}\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                    f"üïí {timestamp.strftime('%H:%M, %d.%m.%Y')}"
                ),
                parse_mode='Markdown'
            )
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", e)
    return ConversationHandler.END

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    keyboard = [
        [InlineKeyboardButton("üìÖ –î–µ–Ω—å", callback_data="day")],
        [InlineKeyboardButton("üóì –ù–µ–¥–µ–ª—è", callback_data="week")],
        [InlineKeyboardButton("üìÜ –ú–µ—Å—è—Ü", callback_data="month")],
        [InlineKeyboardButton("üìä –ì–æ–¥", callback_data="year")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    cursor.execute("DELETE FROM departures WHERE user_id = ?", (user_id,))
    conn.commit()
    await update.message.reply_text("üîÅ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# Flask-–∑–∞–≥–ª—É—à–∫–∞
flask_app = Flask(__name__)
@flask_app.route("/")
def health():
    return "OK"

def run_flask():
    flask_app.run(host="0.0.0.0", port=8080)


async def report_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    period = query.data
    now = datetime.datetime.now()

    if period == "day":
        since = now.replace(hour=0, minute=0, second=0, microsecond=0)
    elif period == "week":
        since = now - datetime.timedelta(days=now.weekday())
        since = since.replace(hour=0, minute=0, second=0, microsecond=0)
    elif period == "month":
        since = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    elif period == "year":
        since = now.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return

    cursor.execute(
        "SELECT u.full_name, u.department, d.reason, d.timestamp FROM departures d "
        "JOIN users u ON d.user_id = u.user_id WHERE d.timestamp >= ? ORDER BY d.timestamp DESC",
        (since,)
    )
    rows = cursor.fetchall()

    wb = Workbook()
    ws = wb.active
    ws.append(["–§–ò–û", "–û—Ç–¥–µ–ª", "–ü—Ä–∏—á–∏–Ω–∞", "–í—Ä–µ–º—è"])
    for row in rows:
        ws.append([
            row[0], row[1], row[2],
            datetime.datetime.strptime(row[3], "%Y-%m-%d %H:%M:%S.%f").strftime("%d.%m.%Y %H:%M")
        ])

    file = BytesIO()
    wb.save(file)
    file.seek(0)

    filename = f"report_{period}_{now.strftime('%Y%m%d_%H%M%S')}.xlsx"
    await context.bot.send_document(chat_id=query.from_user.id, document=file, filename=filename)

def run_bot():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("üö™ –°–æ–æ–±—â–∏—Ç—å –æ–± —É–±—ã—Ç–∏–∏ —Å —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"), handle_departure)
        ],
        states={
            REGISTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
            REGISTER_DEPARTMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_department)],
            WAIT_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_departure)],
        },
        fallbacks=[],
        allow_reentry=True
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.Regex("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç"), report_command))
    app.add_handler(CallbackQueryHandler(report_callback))
    app.add_handler(MessageHandler(filters.ALL, unknown))
    app.run_polling()

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    run_bot()

async def report_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    period = query.data
    now = datetime.datetime.now()

    if period == "day":
        since = now.replace(hour=0, minute=0, second=0, microsecond=0)
    elif period == "week":
        since = now - datetime.timedelta(days=now.weekday())
        since = since.replace(hour=0, minute=0, second=0, microsecond=0)
    elif period == "month":
        since = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    elif period == "year":
        since = now.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return

    cursor.execute(
        "SELECT u.full_name, u.department, d.reason, d.timestamp FROM departures d "
        "JOIN users u ON d.user_id = u.user_id WHERE d.timestamp >= ? ORDER BY d.timestamp DESC",
        (since,)
    )
    rows = cursor.fetchall()

    wb = Workbook()
    ws = wb.active
    ws.append(["–§–ò–û", "–û—Ç–¥–µ–ª", "–ü—Ä–∏—á–∏–Ω–∞", "–í—Ä–µ–º—è"])
    for row in rows:
        ws.append([
            row[0], row[1], row[2],
            datetime.datetime.strptime(row[3], "%Y-%m-%d %H:%M:%S.%f").strftime("%d.%m.%Y %H:%M")
        ])

    file = BytesIO()
    wb.save(file)
    file.seek(0)

    filename = f"report_{period}_{now.strftime('%Y%m%d_%H%M%S')}.xlsx"
    await context.bot.send_document(chat_id=update.effective_user.id, document=file, filename=filename)
